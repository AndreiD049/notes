created: 20220102170139541
creator: AndreiD049
modified: 20220724160512315
modifier: AndreiD049
tags: Algorithms 
title: Maximum product subarray
type: text/vnd.tiddlywiki

Source: https://leetcode.com/problems/maximum-product-subarray/

```text
Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.
```

!! Solution

This puzzle is easily solved with [[Dynamic programming]]
What information do we need? When looping through the array, I want to keep track of the maximum product that I encountered so far before.

[img[2021-11-25-11-18-19.png]]

But there is an issue with the negative numbers. Let's say we have array `[-1, -2, 3, -4]`. What is the maximum product here.

[img[2021-11-25-11-39-42.png]]

Solution to this issue is to keep track both of Max and Min of the previous subarray:

[img[2021-11-25-11-42-44.png]]

With this, only 1 special case remains, it's zero. When we encounter a 0, we want to reset both max and min to 1.

[img[2021-11-25-11-44-57.png]]

```python
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        maxp = minp = nums[0]
        answer = nums[0]
        for num in nums[1:]:
            if num < 0:
                # when we have negative values, signs change
                (maxp, minp) = (minp, maxp)
            maxp = max(num, maxp * num)
            minp = min(num, minp * num)
            answer = max(maxp, answer)
        return answer
```

!! Thoughts

Dynamic programming uses the concept of memorizing the previous calculations so we don't have to re-compute them again and again.
It's actually very similar to [[Maximum subarray]] but here we need another variable to keep track of - `minimum so far`
